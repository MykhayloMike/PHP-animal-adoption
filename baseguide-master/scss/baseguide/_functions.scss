@function assign-inputs($inputs, $pseudo: null) {
	$list: ();

	@each $input in $inputs {
		$input: unquote($input);
		$input: if($pseudo, $input + ':' + $pseudo, $input);
		$list: append($list, $input, comma);
	}

	@return $list;
}

@function pow($number, $exp) {
	$return: $number;

	@if $exp > 0 {
		// If the exponent is positive then multiply it
		@for $i from 1 to $exp {
			$return: $return * $number;
		}
	} @else {
		// If the number is 0 or negative then divide it
		@for $i from (-1 + 1) to (abs($exp) + 1) {
			$return: $return / $number;
		}
	}

	@return $return;
}

@function modular-scale($number, $base: $type-scale-base) {
	$size: pow($type-scale, $number) * $base;

	@return $size;
}

@function to-list($value, $keep: 'both') {
	$keep: if(index('keys' 'values', $keep), $keep, 'both');

	@if type-of($value) == map {
		$keys: ();
		$values: ();
		
		@each $key, $val in $value {
			$keys: append($keys, $key);
			$values: append($values, $val);
		}

		@if $keep == 'keys' {
			@return $keys;
		} @else if $keep == 'values' {
			@return $values;
		} @else {
			@return zip($keys, $values);
		}
	}

	@return if(type-of($value) != list, ($value), $value);
}
